using System;
using System.Collections.Generic;
using System.Reflection;
using UnityEngine;

namespace BlueGraph
{
    /// <summary>
    /// Wrap a static function as a graph node. 
    /// 
    /// This wrapper will dynamically add IO ports to match the 
    /// parameters for the function, create a fast runtime delegate,
    /// and safely execute the function and return the result as 
    /// the output resolver without performing any value type 
    /// parameter boxing. 
    /// 
    /// AOT support is possible - but depends on some magic to ensure
    /// that the signature of each node is statically defined. 
    /// </summary>
    public class FuncNode : AbstractNode
    {
        MethodInfo m_Method;
        string m_MethodAQN;
        
        Type m_ReturnType;
        string m_ReturnTypeAQN;
        
        List<string> m_ParamTypeAQNs = new List<string>();
        List<string> m_ParamNames = new List<string>();
        List<Type> m_ParamTypes = new List<Type>();

        public FuncNode(MethodInfo mi)
        {
            m_Method = mi;
            Bind();
        }

        void Bind()
        {
            LoadMethodInfo();
            
            // Run-once to find the right initializer based on
            // argument length and invoke to generate ports
            // and delegate-based resolver.
            var initializer = GetType()
                .GetMethod($"Init{m_ParamTypes.Count - 1}")
                .MakeGenericMethod(m_ParamTypes.ToArray());

            initializer.Invoke(this, null);
        }

        void LoadMethodInfo()
        {
            var parameters = m_Method.GetParameters();
            m_ReturnType = m_Method.ReturnType;
            m_ReturnTypeAQN = m_Method.ReturnType.AssemblyQualifiedName;
            
            m_ParamTypes.Clear();
            m_ParamTypeAQNs.Clear();
            m_ParamNames.Clear();
            foreach (var p in parameters)
            {
                m_ParamNames.Add(p.Name);
                m_ParamTypes.Add(p.ParameterType);
                m_ParamTypeAQNs.Add(p.ParameterType.AssemblyQualifiedName);
            }

            // Output is also added, since it's part of the generic parameters
            m_ParamNames.Add("Result");
            m_ParamTypes.Add(m_ReturnType);
        }

        void AddPorts(Port[] ports)
        {
            for (int i = 0; i < ports.Length; i++)
            {
                AddPort(ports[i]);
            }
        }

        /// <summary>
        /// Initializers that match the shape of the bound function.
        /// Each one sets up input ports mapped to named parameters
        /// and creates a fast delegate to call the bound function with 
        /// each port's value - returning the value as the output port.
        /// </summary>
        public void Init1<T0, TResult>()
        {
            var func = (Func<T0, TResult>)m_Method.CreateDelegate(
                typeof(Func<T0, TResult>)
            );

            AddPorts(new Port[] {
                new InputPort<T0> { name = m_ParamNames[0] },
                new OutputPort<TResult> { name = "Result", resolver = (p) => func(
                    GetInputValue<T0>(m_ParamNames[0])
                )}
            });
        }

        public void Init2<T0, T1, TResult>()
        {
            var func = (Func<T0, T1, TResult>)m_Method.CreateDelegate(
                typeof(Func<T0, T1, TResult>)
            );

            Debug.Log("Make init2");
            AddPorts(new Port[] {
                new InputPort<T0> { name = m_ParamNames[0] },
                new InputPort<T1> { name = m_ParamNames[1] },
                new OutputPort<TResult> { name = "Result", resolver = (p) => func(
                    GetInputValue<T0>(m_ParamNames[0]),
                    GetInputValue<T1>(m_ParamNames[1])
                )}
            });
        }

        public void Init3<T0, T1, T2, TResult>()
        {
            var func = (Func<T0, T1, T2, TResult>)m_Method.CreateDelegate(
                typeof(Func<T0, T1, T2, TResult>)
            );

            AddPorts(new Port[] {
                new InputPort<T0> { name = m_ParamNames[0] },
                new InputPort<T1> { name = m_ParamNames[1] },
                new InputPort<T2> { name = m_ParamNames[2] },
                new OutputPort<TResult> { name = "Result", resolver = (p) => func(
                    GetInputValue<T0>(m_ParamNames[0]),
                    GetInputValue<T1>(m_ParamNames[1]),
                    GetInputValue<T2>(m_ParamNames[2])
                )}
            });
        }
        
        public void Init4<T0, T1, T2, T3, TResult>()
        {
            var func = (Func<T0, T1, T2, T3, TResult>)m_Method.CreateDelegate(
                typeof(Func<T0, T1, T2, T3, TResult>)
            );

            AddPorts(new Port[] {
                new InputPort<T0> { name = m_ParamNames[0] },
                new InputPort<T1> { name = m_ParamNames[1] },
                new InputPort<T2> { name = m_ParamNames[2] },
                new InputPort<T3> { name = m_ParamNames[2] },
                new OutputPort<TResult> { name = "Result", resolver = (p) => func(
                    GetInputValue<T0>(m_ParamNames[0]),
                    GetInputValue<T1>(m_ParamNames[1]),
                    GetInputValue<T2>(m_ParamNames[2]),
                    GetInputValue<T3>(m_ParamNames[3])
                )}
            });
        }

        // .. and so on for like 8 arguments, probably. 

        // Problem 1. All the inputs are optional though.
        // And I don't know how to apply defaults yet. 

        // Problem 2. out params, ref, params foo[] not supported

        // Problem 3. Polymorphic functions wouldn't be supported
        // E.g. Mathf.Log(f) vs Mathf.Log(f, p)
    }
}
